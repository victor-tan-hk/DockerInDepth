


+++++ 3	Anonymous volumes ++++

**** Create Dockerfile

FROM node:14

WORKDIR /app

COPY package.json /app

#include this if you get certificate related errors
#RUN npm config set strict-ssl false

RUN npm install

COPY . /app

EXPOSE 80

CMD ["node", "server.js"]


***** Docker commands:

docker build -t feedback-node .

docker images

docker run -p 3000:80 -d --name feedback-app --rm feedback-node

localhost:3000/feedback/nameoftitle.txt

docker exec -it feedback-app /bin/bash

pwd
ls -la
cd feedback
ls -la
cat nameoftitle.txt
exit


docker stop feedback-app

docker ps -a

docker run -p 3000:80 -d --name feedback-app feedback-node

docker exec -it feedback-app /bin/bash

localhost:3000/feedback/nameoftitle.txt

docker stop feedback-app

docker start feedback-app

**** Modify Dockerfile


FROM node:14

WORKDIR /app

COPY package.json /app

#include this if you get certificate related errors
#RUN npm config set strict-ssl false

RUN npm install

COPY . /app

VOLUME ["app/feedback"]

EXPOSE 80

CMD ["node", "server.js"]


**** Docker commands

docker build -t feedback-node:volumes .

docker rm -f feedback-app

docker run -p 3000:80 -d --name feedback-app feedback-node:volumes

docker volume ls

docker rm -f feedback-app

docker run -p 3000:80 -d --name feedback-app feedback-node:volumes

docker volume ls

docker rm -f feedback-app

docker run -p 3000:80 -d --name feedback-app feedback-node:volumes

docker volume ls

docker rm -f feedback-app

docker run -p 3000:80 -d --name feedback-app feedback-node:volumes

docker volume ls

docker rm -f feedback-app

docker run -p 3000:80 -d --name feedback-app --rm feedback-node:volumes

docker volume ls

docker stop feedback-app

docker volume ls


+++++ 4	Named volumes ++++

**** Modify Dockerfile


FROM node:14

WORKDIR /app

COPY package.json /app

#include this if you get certificate related errors
#RUN npm config set strict-ssl false

RUN npm install

COPY . /app

EXPOSE 80

CMD ["node", "server.js"]

docker build -t feedback-node:volumes .

docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback --rm feedback-node:volumes

docker volume ls

docker stop feedback-app

docker ps -a

docker volume ls

docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback --rm feedback-node:volumes

localhost:3000/feedback/nameoftitle.txt

docker volume prune

docker volume ls

docker pull alpine

docker run --rm -it -v feedback:/mnt alpine /bin/sh

+++ 5 Using Bind Mounts with Volumes

docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback --rm feedback-node:volumes

+++++ 5.1	Bind mount issues

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v "complete path to root folder:/app" feedback-node:volumes

OR 

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app feedback-node:volumes

docker ps -a

docker logs feedback-app

docker rm -f feedback-app

docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback --rm feedback-node:volumes

docker exec -it feedback-app /bin/bash

docker rm -f feedback-app

docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback --rm feedback-node:volumes

docker start feedback-app

docker ps -a

docker cp feedback-app:/app "/path/to/emptydirectory"

docker rm -f feedback-app

+++++ 5.2	Solution with targeted bind mounting and anonymous volumes

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}/pages:/app/pages feedback-node:volumes

docker exec -it feedback-app /bin/bash

docker rm -f feedback-app

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app  -v /app/node_modules feedback-node:volumes

docker exec -it feedback-app /bin/bash

docker rm -f feedback-app

++++  5.3	Adding a hot reload server monitor

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app  -v /app/node_modules feedback-node:volumes

docker logs feedback-app

docker rm -f feedback-app

++++ Changes to package.json

  "license": "ISC",
  "scripts": {
    "start": "nodemon -L server.js"
  },

  "dependencies": {
    "body-parser": "^1.19.0",
    "express": "^4.17.1"
  },
  "devDependencies": {
    "nodemon": "2.0.4"
  }

++++ Modify Dockerfile

FROM node:14

WORKDIR /app

COPY package.json /app

#include this if you get certificate related errors
#RUN npm config set strict-ssl false

RUN npm install

COPY . /app

EXPOSE 80

CMD [ "npm", "start" ]


++ Docker commands

docker build -t feedback-node:volumes .

docker image history feedback-node:volumes

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app -v /app/node_modules feedback-node:volumes

docker logs feedback-app


++++ 5.4	Managing multiple volumes with a container app

docker volume ls

docker volume create second-feedback

docker volume ls

docker exec -it feedback-app /bin/bash

docker rm -f feedback-app

docker run -p 3000:80 -d  --name feedback-app -v second-feedback:/app/feedback -v ${pwd}:/app -v /app/node_modules feedback-node:volumes

docker exec -it feedback-app /bin/bash

docker rm -f feedback-app

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app -v /app/node_modules feedback-node:volumes

docker exec -it feedback-app /bin/bash

docker rm -f feedback-app

docker run --rm -it -v feedback:/mnt alpine /bin/sh

docker run --rm -it -v second-feedback:/mnt alpine /bin/sh

docker run --name tempcontainer -v feedback:/mnt alpine

docker cp tempcontainer:/mnt "/path/to/emptydirectory"

docker volume prune 

docker volume ls

docker volume rm second-feedback

+++++ 6	Environment Variables and Build arguments

docker rm -f feedback-app

docker build -t feedback-node:env .

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app -v /app/node_modules feedback-node:env

docker rm -f feedback-app

docker run -p 3000:8000 -d  --env PORT=8000 --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app -v /app/node_modules feedback-node:env

docker exec -it feedback-app /bin/bash

docker rm -f feedback-app

docker run -p 3000:8000 -d  --env-file ./.env --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app -v /app/node_modules feedback-node:env

docker build -t feedback-node:web-app .

docker build -t feedback-node:dev --build-arg DEFAULT_PORT=8000 .

docker images

docker image history feedback-node:web-app

docker image history feedback-node:dev

docker run -p 3000:80 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app -v /app/node_modules feedback-node:web-app

docker rm -f feedback-app

docker run -p 3000:8000 -d  --name feedback-app -v feedback:/app/feedback -v ${pwd}:/app -v /app/node_modules feedback-node:dev

docker rm -f feedback-app



